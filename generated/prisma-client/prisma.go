// Code generated by Prisma CLI (https://github.com/prisma/prisma). DO NOT EDIT.

package prisma

import (
	"context"
	"errors"

	"github.com/prisma/prisma-client-lib-go"

	"github.com/machinebox/graphql"
)

var ErrNoResult = errors.New("query returned no result")

func Str(v string) *string { return &v }
func Int32(v int32) *int32 { return &v }
func Bool(v bool) *bool    { return &v }

type BatchPayloadExec struct {
	exec *prisma.BatchPayloadExec
}

func (exec *BatchPayloadExec) Exec(ctx context.Context) (BatchPayload, error) {
	bp, err := exec.exec.Exec(ctx)
	return BatchPayload(bp), err
}

type BatchPayload struct {
	Count int64 `json:"count"`
}

type Aggregate struct {
	Count int64 `json:"count"`
}

type Client struct {
	Client *prisma.Client
}

type Options struct {
	Endpoint string
	Secret   string
}

func New(options *Options, opts ...graphql.ClientOption) *Client {
	endpoint := DefaultEndpoint
	secret := Secret
	if options != nil {
		endpoint = options.Endpoint
		secret = options.Secret
	}
	return &Client{
		Client: prisma.New(endpoint, secret, opts...),
	}
}

func (client *Client) GraphQL(ctx context.Context, query string, variables map[string]interface{}) (map[string]interface{}, error) {
	return client.Client.GraphQL(ctx, query, variables)
}

var DefaultEndpoint = "http://localhost:4488"
var Secret = ""

func (client *Client) Session(params SessionWhereUniqueInput) *SessionExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"SessionWhereUniqueInput!", "Session"},
		"session",
		[]string{"id", "lastUsed"})

	return &SessionExec{ret}
}

type SessionsParams struct {
	Where   *SessionWhereInput   `json:"where,omitempty"`
	OrderBy *SessionOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32               `json:"skip,omitempty"`
	After   *string              `json:"after,omitempty"`
	Before  *string              `json:"before,omitempty"`
	First   *int32               `json:"first,omitempty"`
	Last    *int32               `json:"last,omitempty"`
}

func (client *Client) Sessions(params *SessionsParams) *SessionExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"SessionWhereInput", "SessionOrderByInput", "Session"},
		"sessions",
		[]string{"id", "lastUsed"})

	return &SessionExecArray{ret}
}

type SessionsConnectionParams struct {
	Where   *SessionWhereInput   `json:"where,omitempty"`
	OrderBy *SessionOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32               `json:"skip,omitempty"`
	After   *string              `json:"after,omitempty"`
	Before  *string              `json:"before,omitempty"`
	First   *int32               `json:"first,omitempty"`
	Last    *int32               `json:"last,omitempty"`
}

func (client *Client) SessionsConnection(params *SessionsConnectionParams) SessionConnectionExec {
	panic("not implemented")
}

func (client *Client) User(params UserWhereUniqueInput) *UserExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"UserWhereUniqueInput!", "User"},
		"user",
		[]string{"id", "email", "name", "passwordHash"})

	return &UserExec{ret}
}

type UsersParams struct {
	Where   *UserWhereInput   `json:"where,omitempty"`
	OrderBy *UserOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) Users(params *UsersParams) *UserExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"UserWhereInput", "UserOrderByInput", "User"},
		"users",
		[]string{"id", "email", "name", "passwordHash"})

	return &UserExecArray{ret}
}

type UsersConnectionParams struct {
	Where   *UserWhereInput   `json:"where,omitempty"`
	OrderBy *UserOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) UsersConnection(params *UsersConnectionParams) UserConnectionExec {
	panic("not implemented")
}

func (client *Client) CreateSession(params SessionCreateInput) *SessionExec {
	ret := client.Client.Create(
		params,
		[2]string{"SessionCreateInput!", "Session"},
		"createSession",
		[]string{"id", "lastUsed"})

	return &SessionExec{ret}
}

type SessionUpdateParams struct {
	Data  SessionUpdateInput      `json:"data"`
	Where SessionWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateSession(params SessionUpdateParams) *SessionExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"SessionUpdateInput!", "SessionWhereUniqueInput!", "Session"},
		"updateSession",
		[]string{"id", "lastUsed"})

	return &SessionExec{ret}
}

type SessionUpdateManyParams struct {
	Data  SessionUpdateManyMutationInput `json:"data"`
	Where *SessionWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManySessions(params SessionUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"SessionUpdateManyMutationInput!", "SessionWhereInput"},
		"updateManySessions")
	return &BatchPayloadExec{exec}
}

type SessionUpsertParams struct {
	Where  SessionWhereUniqueInput `json:"where"`
	Create SessionCreateInput      `json:"create"`
	Update SessionUpdateInput      `json:"update"`
}

func (client *Client) UpsertSession(params SessionUpsertParams) *SessionExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"SessionWhereUniqueInput!", "SessionCreateInput!", "SessionUpdateInput!", "Session"},
		"upsertSession",
		[]string{"id", "lastUsed"})

	return &SessionExec{ret}
}

func (client *Client) DeleteSession(params SessionWhereUniqueInput) *SessionExec {
	ret := client.Client.Delete(
		params,
		[2]string{"SessionWhereUniqueInput!", "Session"},
		"deleteSession",
		[]string{"id", "lastUsed"})

	return &SessionExec{ret}
}

func (client *Client) DeleteManySessions(params *SessionWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "SessionWhereInput", "deleteManySessions")
	return &BatchPayloadExec{exec}
}

func (client *Client) CreateUser(params UserCreateInput) *UserExec {
	ret := client.Client.Create(
		params,
		[2]string{"UserCreateInput!", "User"},
		"createUser",
		[]string{"id", "email", "name", "passwordHash"})

	return &UserExec{ret}
}

type UserUpdateParams struct {
	Data  UserUpdateInput      `json:"data"`
	Where UserWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateUser(params UserUpdateParams) *UserExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"UserUpdateInput!", "UserWhereUniqueInput!", "User"},
		"updateUser",
		[]string{"id", "email", "name", "passwordHash"})

	return &UserExec{ret}
}

type UserUpdateManyParams struct {
	Data  UserUpdateManyMutationInput `json:"data"`
	Where *UserWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyUsers(params UserUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"UserUpdateManyMutationInput!", "UserWhereInput"},
		"updateManyUsers")
	return &BatchPayloadExec{exec}
}

type UserUpsertParams struct {
	Where  UserWhereUniqueInput `json:"where"`
	Create UserCreateInput      `json:"create"`
	Update UserUpdateInput      `json:"update"`
}

func (client *Client) UpsertUser(params UserUpsertParams) *UserExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"UserWhereUniqueInput!", "UserCreateInput!", "UserUpdateInput!", "User"},
		"upsertUser",
		[]string{"id", "email", "name", "passwordHash"})

	return &UserExec{ret}
}

func (client *Client) DeleteUser(params UserWhereUniqueInput) *UserExec {
	ret := client.Client.Delete(
		params,
		[2]string{"UserWhereUniqueInput!", "User"},
		"deleteUser",
		[]string{"id", "email", "name", "passwordHash"})

	return &UserExec{ret}
}

func (client *Client) DeleteManyUsers(params *UserWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "UserWhereInput", "deleteManyUsers")
	return &BatchPayloadExec{exec}
}

type SessionOrderByInput string

const (
	SessionOrderByInputIDAsc        SessionOrderByInput = "id_ASC"
	SessionOrderByInputIDDesc       SessionOrderByInput = "id_DESC"
	SessionOrderByInputLastUsedAsc  SessionOrderByInput = "lastUsed_ASC"
	SessionOrderByInputLastUsedDesc SessionOrderByInput = "lastUsed_DESC"
)

type UserOrderByInput string

const (
	UserOrderByInputIDAsc            UserOrderByInput = "id_ASC"
	UserOrderByInputIDDesc           UserOrderByInput = "id_DESC"
	UserOrderByInputEmailAsc         UserOrderByInput = "email_ASC"
	UserOrderByInputEmailDesc        UserOrderByInput = "email_DESC"
	UserOrderByInputNameAsc          UserOrderByInput = "name_ASC"
	UserOrderByInputNameDesc         UserOrderByInput = "name_DESC"
	UserOrderByInputPasswordHashAsc  UserOrderByInput = "passwordHash_ASC"
	UserOrderByInputPasswordHashDesc UserOrderByInput = "passwordHash_DESC"
)

type MutationType string

const (
	MutationTypeCreated MutationType = "CREATED"
	MutationTypeUpdated MutationType = "UPDATED"
	MutationTypeDeleted MutationType = "DELETED"
)

type SessionUpdateManyMutationInput struct {
	LastUsed *string `json:"lastUsed,omitempty"`
}

type SessionCreateInput struct {
	ID       *string            `json:"id,omitempty"`
	User     UserCreateOneInput `json:"user"`
	LastUsed string             `json:"lastUsed"`
}

type UserUpdateOneRequiredInput struct {
	Create  *UserCreateInput       `json:"create,omitempty"`
	Update  *UserUpdateDataInput   `json:"update,omitempty"`
	Upsert  *UserUpsertNestedInput `json:"upsert,omitempty"`
	Connect *UserWhereUniqueInput  `json:"connect,omitempty"`
}

type SessionWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type SessionUpdateInput struct {
	User     *UserUpdateOneRequiredInput `json:"user,omitempty"`
	LastUsed *string                     `json:"lastUsed,omitempty"`
}

type SessionWhereInput struct {
	ID              *string             `json:"id,omitempty"`
	IDNot           *string             `json:"id_not,omitempty"`
	IDIn            []string            `json:"id_in,omitempty"`
	IDNotIn         []string            `json:"id_not_in,omitempty"`
	IDLt            *string             `json:"id_lt,omitempty"`
	IDLte           *string             `json:"id_lte,omitempty"`
	IDGt            *string             `json:"id_gt,omitempty"`
	IDGte           *string             `json:"id_gte,omitempty"`
	IDContains      *string             `json:"id_contains,omitempty"`
	IDNotContains   *string             `json:"id_not_contains,omitempty"`
	IDStartsWith    *string             `json:"id_starts_with,omitempty"`
	IDNotStartsWith *string             `json:"id_not_starts_with,omitempty"`
	IDEndsWith      *string             `json:"id_ends_with,omitempty"`
	IDNotEndsWith   *string             `json:"id_not_ends_with,omitempty"`
	User            *UserWhereInput     `json:"user,omitempty"`
	LastUsed        *string             `json:"lastUsed,omitempty"`
	LastUsedNot     *string             `json:"lastUsed_not,omitempty"`
	LastUsedIn      []string            `json:"lastUsed_in,omitempty"`
	LastUsedNotIn   []string            `json:"lastUsed_not_in,omitempty"`
	LastUsedLt      *string             `json:"lastUsed_lt,omitempty"`
	LastUsedLte     *string             `json:"lastUsed_lte,omitempty"`
	LastUsedGt      *string             `json:"lastUsed_gt,omitempty"`
	LastUsedGte     *string             `json:"lastUsed_gte,omitempty"`
	And             []SessionWhereInput `json:"AND,omitempty"`
	Or              []SessionWhereInput `json:"OR,omitempty"`
	Not             []SessionWhereInput `json:"NOT,omitempty"`
}

type UserUpdateManyMutationInput struct {
	Email        *string `json:"email,omitempty"`
	Name         *string `json:"name,omitempty"`
	PasswordHash *string `json:"passwordHash,omitempty"`
}

type UserCreateOneInput struct {
	Create  *UserCreateInput      `json:"create,omitempty"`
	Connect *UserWhereUniqueInput `json:"connect,omitempty"`
}

type UserCreateInput struct {
	ID           *string `json:"id,omitempty"`
	Email        string  `json:"email"`
	Name         string  `json:"name"`
	PasswordHash string  `json:"passwordHash"`
}

type SessionSubscriptionWhereInput struct {
	MutationIn                 []MutationType                  `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                         `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                        `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                        `json:"updatedFields_contains_some,omitempty"`
	Node                       *SessionWhereInput              `json:"node,omitempty"`
	And                        []SessionSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []SessionSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []SessionSubscriptionWhereInput `json:"NOT,omitempty"`
}

type UserWhereUniqueInput struct {
	ID    *string `json:"id,omitempty"`
	Email *string `json:"email,omitempty"`
}

type UserUpdateInput struct {
	Email        *string `json:"email,omitempty"`
	Name         *string `json:"name,omitempty"`
	PasswordHash *string `json:"passwordHash,omitempty"`
}

type UserWhereInput struct {
	ID                        *string          `json:"id,omitempty"`
	IDNot                     *string          `json:"id_not,omitempty"`
	IDIn                      []string         `json:"id_in,omitempty"`
	IDNotIn                   []string         `json:"id_not_in,omitempty"`
	IDLt                      *string          `json:"id_lt,omitempty"`
	IDLte                     *string          `json:"id_lte,omitempty"`
	IDGt                      *string          `json:"id_gt,omitempty"`
	IDGte                     *string          `json:"id_gte,omitempty"`
	IDContains                *string          `json:"id_contains,omitempty"`
	IDNotContains             *string          `json:"id_not_contains,omitempty"`
	IDStartsWith              *string          `json:"id_starts_with,omitempty"`
	IDNotStartsWith           *string          `json:"id_not_starts_with,omitempty"`
	IDEndsWith                *string          `json:"id_ends_with,omitempty"`
	IDNotEndsWith             *string          `json:"id_not_ends_with,omitempty"`
	Email                     *string          `json:"email,omitempty"`
	EmailNot                  *string          `json:"email_not,omitempty"`
	EmailIn                   []string         `json:"email_in,omitempty"`
	EmailNotIn                []string         `json:"email_not_in,omitempty"`
	EmailLt                   *string          `json:"email_lt,omitempty"`
	EmailLte                  *string          `json:"email_lte,omitempty"`
	EmailGt                   *string          `json:"email_gt,omitempty"`
	EmailGte                  *string          `json:"email_gte,omitempty"`
	EmailContains             *string          `json:"email_contains,omitempty"`
	EmailNotContains          *string          `json:"email_not_contains,omitempty"`
	EmailStartsWith           *string          `json:"email_starts_with,omitempty"`
	EmailNotStartsWith        *string          `json:"email_not_starts_with,omitempty"`
	EmailEndsWith             *string          `json:"email_ends_with,omitempty"`
	EmailNotEndsWith          *string          `json:"email_not_ends_with,omitempty"`
	Name                      *string          `json:"name,omitempty"`
	NameNot                   *string          `json:"name_not,omitempty"`
	NameIn                    []string         `json:"name_in,omitempty"`
	NameNotIn                 []string         `json:"name_not_in,omitempty"`
	NameLt                    *string          `json:"name_lt,omitempty"`
	NameLte                   *string          `json:"name_lte,omitempty"`
	NameGt                    *string          `json:"name_gt,omitempty"`
	NameGte                   *string          `json:"name_gte,omitempty"`
	NameContains              *string          `json:"name_contains,omitempty"`
	NameNotContains           *string          `json:"name_not_contains,omitempty"`
	NameStartsWith            *string          `json:"name_starts_with,omitempty"`
	NameNotStartsWith         *string          `json:"name_not_starts_with,omitempty"`
	NameEndsWith              *string          `json:"name_ends_with,omitempty"`
	NameNotEndsWith           *string          `json:"name_not_ends_with,omitempty"`
	PasswordHash              *string          `json:"passwordHash,omitempty"`
	PasswordHashNot           *string          `json:"passwordHash_not,omitempty"`
	PasswordHashIn            []string         `json:"passwordHash_in,omitempty"`
	PasswordHashNotIn         []string         `json:"passwordHash_not_in,omitempty"`
	PasswordHashLt            *string          `json:"passwordHash_lt,omitempty"`
	PasswordHashLte           *string          `json:"passwordHash_lte,omitempty"`
	PasswordHashGt            *string          `json:"passwordHash_gt,omitempty"`
	PasswordHashGte           *string          `json:"passwordHash_gte,omitempty"`
	PasswordHashContains      *string          `json:"passwordHash_contains,omitempty"`
	PasswordHashNotContains   *string          `json:"passwordHash_not_contains,omitempty"`
	PasswordHashStartsWith    *string          `json:"passwordHash_starts_with,omitempty"`
	PasswordHashNotStartsWith *string          `json:"passwordHash_not_starts_with,omitempty"`
	PasswordHashEndsWith      *string          `json:"passwordHash_ends_with,omitempty"`
	PasswordHashNotEndsWith   *string          `json:"passwordHash_not_ends_with,omitempty"`
	And                       []UserWhereInput `json:"AND,omitempty"`
	Or                        []UserWhereInput `json:"OR,omitempty"`
	Not                       []UserWhereInput `json:"NOT,omitempty"`
}

type UserUpdateDataInput struct {
	Email        *string `json:"email,omitempty"`
	Name         *string `json:"name,omitempty"`
	PasswordHash *string `json:"passwordHash,omitempty"`
}

type UserUpsertNestedInput struct {
	Update UserUpdateDataInput `json:"update"`
	Create UserCreateInput     `json:"create"`
}

type UserSubscriptionWhereInput struct {
	MutationIn                 []MutationType               `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                      `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                     `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                     `json:"updatedFields_contains_some,omitempty"`
	Node                       *UserWhereInput              `json:"node,omitempty"`
	And                        []UserSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []UserSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []UserSubscriptionWhereInput `json:"NOT,omitempty"`
}

type SessionConnectionExec struct {
	exec *prisma.Exec
}

func (instance *SessionConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *SessionConnectionExec) Edges() *SessionEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "SessionEdge"},
		"edges",
		[]string{"cursor"})

	return &SessionEdgeExec{ret}
}

func (instance *SessionConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateSession"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance SessionConnectionExec) Exec(ctx context.Context) (*SessionConnection, error) {
	var v SessionConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance SessionConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type SessionConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance SessionConnectionExecArray) Exec(ctx context.Context) ([]SessionConnection, error) {
	var v []SessionConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type SessionConnection struct {
}

type UserExec struct {
	exec *prisma.Exec
}

func (instance UserExec) Exec(ctx context.Context) (*User, error) {
	var v User
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserExecArray struct {
	exec *prisma.Exec
}

func (instance UserExecArray) Exec(ctx context.Context) ([]User, error) {
	var v []User
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type User struct {
	ID           string `json:"id"`
	Email        string `json:"email"`
	Name         string `json:"name"`
	PasswordHash string `json:"passwordHash"`
}

type UserPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance UserPreviousValuesExec) Exec(ctx context.Context) (*UserPreviousValues, error) {
	var v UserPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance UserPreviousValuesExecArray) Exec(ctx context.Context) ([]UserPreviousValues, error) {
	var v []UserPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserPreviousValues struct {
	ID           string `json:"id"`
	Email        string `json:"email"`
	Name         string `json:"name"`
	PasswordHash string `json:"passwordHash"`
}

type UserConnectionExec struct {
	exec *prisma.Exec
}

func (instance *UserConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *UserConnectionExec) Edges() *UserEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "UserEdge"},
		"edges",
		[]string{"cursor"})

	return &UserEdgeExec{ret}
}

func (instance *UserConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateUser"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance UserConnectionExec) Exec(ctx context.Context) (*UserConnection, error) {
	var v UserConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance UserConnectionExecArray) Exec(ctx context.Context) ([]UserConnection, error) {
	var v []UserConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserConnection struct {
}

type SessionSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *SessionSubscriptionPayloadExec) Node() *SessionExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Session"},
		"node",
		[]string{"id", "lastUsed"})

	return &SessionExec{ret}
}

func (instance *SessionSubscriptionPayloadExec) PreviousValues() *SessionPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "SessionPreviousValues"},
		"previousValues",
		[]string{"id", "lastUsed"})

	return &SessionPreviousValuesExec{ret}
}

func (instance SessionSubscriptionPayloadExec) Exec(ctx context.Context) (*SessionSubscriptionPayload, error) {
	var v SessionSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance SessionSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type SessionSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance SessionSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]SessionSubscriptionPayload, error) {
	var v []SessionSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type SessionSubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type SessionPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance SessionPreviousValuesExec) Exec(ctx context.Context) (*SessionPreviousValues, error) {
	var v SessionPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance SessionPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type SessionPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance SessionPreviousValuesExecArray) Exec(ctx context.Context) ([]SessionPreviousValues, error) {
	var v []SessionPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type SessionPreviousValues struct {
	ID       string `json:"id"`
	LastUsed string `json:"lastUsed"`
}

type SessionExec struct {
	exec *prisma.Exec
}

func (instance *SessionExec) User() *UserExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "User"},
		"user",
		[]string{"id", "email", "name", "passwordHash"})

	return &UserExec{ret}
}

func (instance SessionExec) Exec(ctx context.Context) (*Session, error) {
	var v Session
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance SessionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type SessionExecArray struct {
	exec *prisma.Exec
}

func (instance SessionExecArray) Exec(ctx context.Context) ([]Session, error) {
	var v []Session
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type Session struct {
	ID       string `json:"id"`
	LastUsed string `json:"lastUsed"`
}

type UserEdgeExec struct {
	exec *prisma.Exec
}

func (instance *UserEdgeExec) Node() *UserExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "User"},
		"node",
		[]string{"id", "email", "name", "passwordHash"})

	return &UserExec{ret}
}

func (instance UserEdgeExec) Exec(ctx context.Context) (*UserEdge, error) {
	var v UserEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance UserEdgeExecArray) Exec(ctx context.Context) ([]UserEdge, error) {
	var v []UserEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserEdge struct {
	Cursor string `json:"cursor"`
}

type PageInfoExec struct {
	exec *prisma.Exec
}

func (instance PageInfoExec) Exec(ctx context.Context) (*PageInfo, error) {
	var v PageInfo
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance PageInfoExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type PageInfoExecArray struct {
	exec *prisma.Exec
}

func (instance PageInfoExecArray) Exec(ctx context.Context) ([]PageInfo, error) {
	var v []PageInfo
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type UserSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *UserSubscriptionPayloadExec) Node() *UserExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "User"},
		"node",
		[]string{"id", "email", "name", "passwordHash"})

	return &UserExec{ret}
}

func (instance *UserSubscriptionPayloadExec) PreviousValues() *UserPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "UserPreviousValues"},
		"previousValues",
		[]string{"id", "email", "name", "passwordHash"})

	return &UserPreviousValuesExec{ret}
}

func (instance UserSubscriptionPayloadExec) Exec(ctx context.Context) (*UserSubscriptionPayload, error) {
	var v UserSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance UserSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]UserSubscriptionPayload, error) {
	var v []UserSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserSubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type SessionEdgeExec struct {
	exec *prisma.Exec
}

func (instance *SessionEdgeExec) Node() *SessionExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Session"},
		"node",
		[]string{"id", "lastUsed"})

	return &SessionExec{ret}
}

func (instance SessionEdgeExec) Exec(ctx context.Context) (*SessionEdge, error) {
	var v SessionEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance SessionEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type SessionEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance SessionEdgeExecArray) Exec(ctx context.Context) ([]SessionEdge, error) {
	var v []SessionEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type SessionEdge struct {
	Cursor string `json:"cursor"`
}
